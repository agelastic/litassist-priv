name: Release

on:
  push:
    tags:
      - 'v*.*.*'

permissions:
  contents: write

jobs:
  build:
    name: Build and Release
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for changelog generation
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
        pip install -r requirements.txt
    
    - name: Install test dependencies
      run: |
        pip install pytest
    
    - name: Extract version from tag
      id: get_version
      run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
    
    - name: Verify version matches setup.py
      run: |
        SETUP_VERSION=$(python -c "import ast; tree=ast.parse(open('setup.py').read()); print([node.value.s for node in ast.walk(tree) if isinstance(node, ast.Assign) and any(isinstance(t, ast.Name) and t.id == 'version' for t in node.targets)][0])")
        TAG_VERSION=${{ steps.get_version.outputs.VERSION }}
        if [ "$SETUP_VERSION" != "$TAG_VERSION" ]; then
          echo "Version mismatch: setup.py has $SETUP_VERSION, tag is $TAG_VERSION"
          exit 1
        fi
        echo "Version verified: $TAG_VERSION"
    
    - name: Run tests
      run: |
        pytest tests/unit/ -v
      continue-on-error: true  # Don't fail build if tests fail (for now)
    
    - name: Run linting
      run: |
        pip install ruff
        ruff check .
      continue-on-error: true  # Don't fail build if linting fails (for now)
    
    - name: Build distribution
      run: |
        python -m build
        ls -la dist/
    
    - name: Generate release notes
      id: release_notes
      run: |
        VERSION=${{ steps.get_version.outputs.VERSION }}
        echo "## LitAssist v$VERSION" > release_notes.md
        echo "" >> release_notes.md
        echo "### Release Notes" >> release_notes.md
        echo "" >> release_notes.md
        
        # Try to use the generate-release-notes.py script if it exists and works
        if [ -f "scripts/release/generate-release-notes.py" ]; then
          if python scripts/release/generate-release-notes.py "$VERSION" --format github 2>/dev/null; then
            python scripts/release/generate-release-notes.py "$VERSION" --format github >> release_notes.md
          else
            echo "This is an automated release of LitAssist v$VERSION" >> release_notes.md
          fi
        else
          echo "This is an automated release of LitAssist v$VERSION" >> release_notes.md
        fi
        
        # Add installation instructions
        cat >> release_notes.md << 'EOF'
        
        ### Installation
        ```bash
        pip install litassist==VERSION
        ```
        
        ### Upgrading
        ```bash
        pip install --upgrade litassist
        ```
        
        ### Documentation
        - [User Guide](https://github.com/REPO/blob/main/docs/user/LitAssist_User_Guide.md)
        - [Installation Guide](https://github.com/REPO/blob/main/INSTALLATION.md)
        EOF
        
        # Replace placeholders
        sed -i "s/VERSION/$VERSION/g" release_notes.md
        sed -i "s|REPO|${{ github.repository }}|g" release_notes.md
    
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        body_path: release_notes.md
        files: |
          dist/*.whl
          dist/*.tar.gz
        draft: false
        prerelease: false
        name: LitAssist v${{ steps.get_version.outputs.VERSION }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    # Optional: Upload to PyPI
    # Uncomment the following section if you want automatic PyPI uploads
    # You'll need to add PYPI_API_TOKEN to your repository secrets
    
    # - name: Publish to PyPI
    #   env:
    #     TWINE_USERNAME: __token__
    #     TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
    #   run: |
    #     python -m twine upload dist/*

  notify:
    name: Notify Release
    runs-on: ubuntu-latest
    needs: build
    if: always()
    
    steps:
    - name: Extract version from tag
      id: get_version
      run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
    
    - name: Release Summary
      run: |
        if [ "${{ needs.build.result }}" == "success" ]; then
          echo "‚úÖ Release v${{ steps.get_version.outputs.VERSION }} completed successfully!"
          echo "üì¶ View release: https://github.com/${{ github.repository }}/releases/tag/v${{ steps.get_version.outputs.VERSION }}"
        else
          echo "‚ùå Release v${{ steps.get_version.outputs.VERSION }} failed!"
          echo "Check the workflow logs for details."
        fi